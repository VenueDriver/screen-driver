- service: web
  name: build_web_app
  exclude: ^(master|production|staging)
  command: bash -c "npm install && node_modules/.bin/ng build --prod --aot"

- service: serverless
  name: serverless_deps
  command: echo serverless image is ready to use

- type: serial
  name: run_tests
  steps:
    - service: web
      name: web_run_tests
      command: bash -c "npm install && node_modules/.bin/ng test --watch=false"

    - service: api
      name: main_api_run_tests
      command: sh scripts/run_tests.sh content-management-service

    - service: api
      name: auth_api_run_tests
      command: sh scripts/run_tests.sh auth-service

- type: serial
  name: staging_deployment
  tag: staging
  steps:
    - service: api
      name: staging_deploy_serverless_api
      command: sh scripts/deploy.sh us-east-1 staging

    - service: web
      name: staging_add_api_endpoint
      command: bash -c "npm install && sed -i 's@API_HOST@'"$STAGING_API_ENDPOINT"'@' src/environments/environment.prod.ts && node_modules/.bin/ng build --prod --aot"

    - service: awsdeployment
      name: staging_deploy_web
      encrypted_env_file: deployment.env.encrypted
      command: bash -c "aws s3 sync /app-src/dist $AWS_S3_BUCKET_STAGING"

    - service: kiosk
      name: staging_build_kiosk_app_windows
      command: bash -c "sed -i 's@API_HOST@'"$STAGING_API_ENDPOINT"'@' properties/app.properties && npm run win-installer"

    - service: kiosk_deployment
      name: staging_deploy_kiosk_app_windows
      encrypted_env_file: deployment.env.encrypted
      command: bash -c "aws s3 sync /app-src/dist/ $AWS_S3_BUCKET_KIOSK_STAGING/windows --exclude='*' --include='*.exe' --include='latest.yml'"

    - service: kiosk
      name: staging_build_kiosk_app_linux
      command: bash -c "sed -i 's@API_HOST@'"$STAGING_API_ENDPOINT"'@' properties/app.properties && npm run linux-installer"

    - service: kiosk_deployment
      name: staging_deploy_kiosk_app_linux
      encrypted_env_file: deployment.env.encrypted
      command: bash -c "aws s3 sync /app-src/dist/ $AWS_S3_BUCKET_KIOSK_STAGING/linux --exclude='*' --include='*.zip'"

    - service: kiosk
      name: staging_build_kiosk_app_mac
      command: bash -c "sed -i 's@API_HOST@'"$STAGING_API_ENDPOINT"'@' properties/app.properties && npm run mac-installer"

    - service: kiosk_deployment
      name: staging_deploy_kiosk_app_mac
      encrypted_env_file: deployment.env.encrypted
      command: bash -c "aws s3 sync /app-src/dist/ $AWS_S3_BUCKET_KIOSK_STAGING/mac --exclude='*' --include='*.tar.gz'"

- type: serial
  name: production_deployment
  tag: master
  steps:
    - service: api
      name: serverless_api_production
      command: serverless deploy --verbose --region us-east-1 --stage production

    - service: web
      name: production_add_api_endpoint
      command: bash -c "npm install && sed -i 's@API_HOST@'"$PRODUCTION_API_ENDPOINT"'@' src/environments/environment.prod.ts && node_modules/.bin/ng build --prod --aot"

    - service: awsdeployment
      name: production_deploy_web
      encrypted_env_file: deployment.env.encrypted
      command: bash -c "aws s3 sync /app-src/dist $AWS_S3_BUCKET_PRODUCTION"

    - service: kiosk
      name: production_build_kiosk_app
      command: bash -c "sed -i 's@API_HOST@'"$PRODUCTION_API_ENDPOINT"'@' properties/app.properties && npm run win-installer"

    - service: kiosk_deployment
      name: production_deploy_kiosk_app
      encrypted_env_file: deployment.env.encrypted
      command: bash -c "aws s3 sync /app-src/dist/ $AWS_S3_BUCKET_KIOSK_PRODUCTION --exclude='win-unpacked/*'"
