service: screen-driver-auth-api

frameworkVersion: ">=1.20.1 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  environment:
    STAGE: ${opt:stage}
    USER_POOL: ${self:service}-userpool-${opt:stage}
    USER_POOL_ID:
      Ref: CognitoUserPool
    USER_POOL_CLIENT: ${self:service}-appclient-${opt:stage}
    USER_POOL_CLIENT_ID:
      Ref: CognitoAppClient
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:*
      Resource: arn:aws:cognito-idp:*

custom:
  options-method: ${file(./serverless/options-method-properties.yml)}
  rest-api-arn: ${file(./serverless/rest-api-arn.yml)}
  base-lambda-uri: ${file(./serverless/base-lambda-uri.yml)}

functions:
  authenticate:
    handler: src/auth/authenticator.handler

  sign_out:
    handler: src/auth/sign_out.handler
    events:
      - http:
          path: api/sign_out
          method: post
          cors: true

  refresh_token:
    handler: src/auth_token/auth_token.refresh
    events:
      - http:
          path: api/token/refresh
          method: post
          cors: true

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.environment.USER_POOL}
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: false
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        Schema:
          - AttributeDataType: Boolean
            Mutable: true
            Name: admin

    CognitoAppClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.environment.USER_POOL_CLIENT}
        RefreshTokenValidity: 1
        UserPoolId:
          Ref: CognitoUserPool

    ApiAuthResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::ImportValue: ScreenDriverRootApiResource
        PathPart: auth
        RestApiId:
          Fn::ImportValue: ScreenDriverRestApi

    ApiAuthOptionsMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        MethodResponses: ${self:custom.options-method.MethodResponses}
        Integration: ${self:custom.options-method.Integration}
        ResourceId:
          Ref: ApiAuthResource
        RestApiId:
          Fn::ImportValue: ScreenDriverRestApi

    ApiAuthMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: NONE
        HttpMethod: POST
        ResourceId:
          Ref: ApiAuthResource
        RestApiId:
          Fn::ImportValue: ScreenDriverRestApi
        Integration:
          Type: AWS_PROXY
          IntegrationHttpMethod: POST
          Uri:
            Fn::Join:
              - ''
              - - ${self:custom.base-lambda-uri}
                - Fn::GetAtt:
                  - AuthenticateLambdaFunction
                  - Arn
                - '/invocations'

    AuthFunctionPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - AuthenticateLambdaFunction
            - Arn
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
        SourceArn: ${self:custom.rest-api-arn}

plugins:
  - serverless-offline
  - serverless-export-env

package:
  exclude:
    - .*
    - package*
