ContentTable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      -
        AttributeName: id
        AttributeType: S
    KeySchema:
      -
        AttributeName: id
        KeyType: HASH
    ProvisionedThroughput:
      ReadCapacityUnits: 1
      WriteCapacityUnits: 1
    TableName: ${self:provider.environment.CONTENT_TABLE}

VenuesTable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      -
        AttributeName: id
        AttributeType: S
    KeySchema:
      -
        AttributeName: id
        KeyType: HASH
    ProvisionedThroughput:
      ReadCapacityUnits: 1
      WriteCapacityUnits: 1
    TableName: ${self:provider.environment.VENUES_TABLE}

SettingsTable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      -
        AttributeName: id
        AttributeType: S
    KeySchema:
      -
        AttributeName: id
        KeyType: HASH
    ProvisionedThroughput:
      ReadCapacityUnits: 1
      WriteCapacityUnits: 1
    TableName: ${self:provider.environment.SETTINGS_TABLE}
    StreamSpecification:
      StreamViewType: NEW_AND_OLD_IMAGES

SchedulesTable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      -
        AttributeName: id
        AttributeType: S
    KeySchema:
      -
        AttributeName: id
        KeyType: HASH
    ProvisionedThroughput:
      ReadCapacityUnits: 1
      WriteCapacityUnits: 1
    TableName: ${self:provider.environment.SCHEDULES_TABLE}
    StreamSpecification:
      StreamViewType: NEW_AND_OLD_IMAGES

CustomizeCognitoMessagePermission:
  Type: AWS::Lambda::Permission
  Properties:
    Action: lambda:InvokeFunction
    FunctionName:
      Fn::GetAtt:
        - CustomizeUnderscorecognitoUnderscoremessageLambdaFunction
        - Arn
    Principal: cognito-idp.amazonaws.com
    SourceArn: ${self:custom.userPoolArn}

AuthResource:
  Type: AWS::ApiGateway::Resource
  Properties:
    ParentId:
      Ref: ApiGatewayResourceApi
    PathPart: 'auth'
    RestApiId:
      Ref: ApiGatewayRestApi

AuthProxyResource:
  Type: AWS::ApiGateway::Resource
  Properties:
    ParentId:
      Ref: AuthResource
    PathPart: '{proxy+}'
    RestApiId:
      Ref: ApiGatewayRestApi

AuthProxyMethod:
  Type: AWS::ApiGateway::Method
  Properties:
    ResourceId:
      Ref: AuthProxyResource
    RestApiId:
      Ref: ApiGatewayRestApi
    AuthorizationType: NONE
    HttpMethod: ANY
    MethodResponses:
      - StatusCode: 200
    RequestParameters:
      method.request.path.proxy: true
    Integration:
      IntegrationHttpMethod: ANY
      Type: HTTP_PROXY
      Uri:
        Fn::Join:
          - ''
          - - https://
            - Fn::ImportValue: ScreenDriverAuthRestApiId-${opt:stage}
            - .execute-api.
            - Ref: AWS::Region
            - .amazonaws.com/${opt:stage}/api/auth/{proxy}
      IntegrationResponses:
        - StatusCode: 200
      RequestParameters:
        integration.request.path.proxy: method.request.path.proxy
        integration.request.header.Accept-Encoding: "'identity'"
      PassthroughBehavior: WHEN_NO_MATCH

MaintenanceResource:
  Type: AWS::ApiGateway::Resource
  Properties:
    ParentId:
      Ref: ApiGatewayResourceApi
    PathPart: 'screens'
    RestApiId:
      Ref: ApiGatewayRestApi

MaintenanceProxyResource:
  Type: AWS::ApiGateway::Resource
  Properties:
    ParentId:
      Ref: MaintenanceResource
    PathPart: '{proxy+}'
    RestApiId:
      Ref: ApiGatewayRestApi

MaintenanceProxyMethod:
  Type: AWS::ApiGateway::Method
  Properties:
    ResourceId:
      Ref: MaintenanceProxyResource
    RestApiId:
      Ref: ApiGatewayRestApi
    AuthorizationType: NONE
    HttpMethod: ANY
    MethodResponses:
      - StatusCode: 200
    RequestParameters:
      method.request.path.proxy: true
    Integration:
      IntegrationHttpMethod: ANY
      Type: HTTP_PROXY
      Uri:
        Fn::Join:
          - ''
          - - https://
            - Fn::ImportValue: ScreenDriverMaintenanceRestApiId-${opt:stage}
            - .execute-api.
            - Ref: AWS::Region
            - .amazonaws.com/${opt:stage}/api/screens/{proxy}
      IntegrationResponses:
        - StatusCode: 200
      RequestParameters:
        integration.request.path.proxy: method.request.path.proxy
        integration.request.header.Accept-Encoding: "'identity'"
      PassthroughBehavior: WHEN_NO_MATCH
