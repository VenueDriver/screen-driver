'use strict';

// tests for update_venue
// Generated by serverless-mocha-plugin
require('./helpers/TestProviderConfigurator').configure();
const DatabaseCleaner = require('./helpers/DatabaseCleaner');

const mod = require('../venues/update.js');
const createFunction = require('../venues/create.js');
const mochaPlugin = require('serverless-mocha-plugin');

const lambdaWrapper = mochaPlugin.lambdaWrapper;
const expect = mochaPlugin.chai.expect;
const assert = mochaPlugin.chai.assert;
const wrappedUpdate = lambdaWrapper.wrap(mod, {handler: 'update'});
const wrappedCreate = lambdaWrapper.wrap(createFunction, {handler: 'create'});
const idLength = 36;

describe('update_venue', () => {
    before((done) => {
        DatabaseCleaner.cleanDatabase().then(() => done());
    });

    afterEach(done => {
        DatabaseCleaner.cleanDatabase().then(() => done());
    });

    it('Should update venue name', () => {
        let newVenue = {name: "Hakkasan"};
        let updatedVenue = {name: "Hakkasan LV", _rev: 0};

        return createUpdateAndTest(newVenue, updatedVenue, (body) => {
            expect(body).to.have.property("name").that.equal("Hakkasan LV");
        });
    });

    it('Should update venue content id', () => {
        let newVenue = {name: "Hakkasan"};
        let updatedVenue = {name: "Hakkasan", content_id: "710b962e-041c-11e1-9234-0123456789ab", _rev: 0};

        return createUpdateAndTest(newVenue, updatedVenue, (body) => {
            expect(body).to.have.property("content_id").that.equal("710b962e-041c-11e1-9234-0123456789ab");
        });
    });

    it('Should update venue screen groups names', () => {
        let newVenue = {name: "Hakkasan", screen_groups: [{name: "Touch"}, {name: "Deli"}]};
        let updatedVenue = {name: "Hakkasan", screen_groups: [{name: "Menu"}, {name: "Restaurant"}], _rev: 0};

        return createUpdateAndTest(newVenue, updatedVenue, (body) => {
            expect(body.screen_groups[0]).to.have.property("name").that.equal("Menu");
            expect(body.screen_groups[1]).to.have.property("name").that.equal("Restaurant");
        });
    });

    it('Should add screen group to existing venue, and id should be generated automatically', () => {
        let newVenue = {name: "Hakkasan", screen_groups: [{name: "Touch"}]};
        let updatedVenue = {name: "Hakkasan", screen_groups: [{name: "Touch"}, {name: "Deli"}], _rev: 0};

        return createUpdateAndTest(newVenue, updatedVenue, (body) => {
            expect(body.screen_groups[0]).to.have.property("name").that.equal("Touch");
            expect(body.screen_groups[1]).to.have.property("name").that.equal("Deli");
            expect(body.screen_groups[1]).to.have.property("id").with.lengthOf(idLength);
        });
    });

    it('Should add screen to existing screen group, and id should be generated automatically', () => {
        let newVenue = {name: "Hakkasan", screen_groups: [{name: "Touch", screens: [{name: "A"}]}]};
        let updatedVenue = {
            name: "Hakkasan",
            screen_groups: [{name: "Touch", screens: [{name: "A"}, {name: "B"}]}],
            _rev: 0
        };

        return createUpdateAndTest(newVenue, updatedVenue, (body) => {
            expect(body.screen_groups[0].screens[0]).to.have.property("name").that.equal("A");
            expect(body.screen_groups[0].screens[1]).to.have.property("name").that.equal("B");
            expect(body.screen_groups[0].screens[1]).to.have.property("id").with.lengthOf(idLength);
        });
    });

    it('Shouldn\'t change venue name to existing name', () => {
        let existingVenue = {name: "Hakkasan LV"};
        let newVenue = {name: "Hakkasan"};
        let updatedVenue = {name: "Hakkasan LV", _rev: 0};

        return createVenue(getParametersFor(existingVenue))
            .then(() => createUpdateAndTest(newVenue, updatedVenue, (body, response) => {
                expect(response).to.have.property("statusCode").that.equal(500);
                expect(body).to.have.property("message").that.equal("Venue with such name already exists")
            }))
    });

    it('Shouldn\'t add new screen group with non-unique name', () => {
        let newVenue = {name: "Hakkasan LV", screen_groups: [{name: "Touch"}]};
        let updatedVenue = {name: "Hakkasan LV", screen_groups: [{name: "Touch"}, {name: "Touch"}], _rev: 0};

        return createUpdateAndTest(newVenue, updatedVenue, (body, response) => {
            expect(response).to.have.property("statusCode").that.equal(500);
            expect(body).to.have.property("message").that.equal("Groups should have unique names");
        })
    });

    it('Shouldn\'t add new screen with non-unique name', () => {
        let newVenue = {
            name: "Hakkasan LV",
            screen_groups: [
                {
                    name: "Touch",
                    screens: [{name: "A"}]
                }]
        };
        let updatedVenue = {
            name: "Hakkasan LV",
            screen_groups: [
                {
                    name: "Touch",
                    screens: [{name: "A"}, {name: "A"}]
                }],
            _rev: 0
        };

        return createUpdateAndTest(newVenue, updatedVenue, (body, response) => {
            expect(response).to.have.property("statusCode").that.equal(500);
            expect(body).to.have.property("message").that.equal("Screens should have unique names");
        })
    });

    it('Shouldn\'t delete venue name', () => {
        let newVenue = {name: "Hakkasan LV"};
        let updatedVenue = {_rev: 0};

        return createUpdateAndTest(newVenue, updatedVenue, (body, response) => {
            expect(response).to.have.property("statusCode").that.equal(500);
            expect(body).to.have.property("message").that.equal("Venue couldn\'t be without name");
        })
    });

    it('Shouldn\'t delete group name', () => {
        let newVenue = {name: "Hakkasan LV", screen_groups: [{name: "Touch"}]};
        let updatedVenue = {name: "Hakkasan LV", screen_groups: [{}], _rev: 0};

        return createUpdateAndTest(newVenue, updatedVenue, (body, response) => {
            expect(response).to.have.property("statusCode").that.equal(500);
            expect(body).to.have.property("message").that.equal("Screen group couldn\'t be without name");
        })
    });

    it('Shouldn\'t delete screen name', () => {
        let newVenue = {
            name: "Hakkasan LV",
            screen_groups: [
                {name: "Touch", screens: [{name: "A"}]}]
        };
        let updatedVenue = {
            name: "Hakkasan LV",
            screen_groups: [
                {name: "Touch", screens: [{}]}],
            _rev: 0
        };

        return createUpdateAndTest(newVenue, updatedVenue, (body, response) => {
            expect(response).to.have.property("statusCode").that.equal(500);
            expect(body).to.have.property("message").that.equal("Screen couldn\'t be without name");
        })
    });

    it('Shouldn\'t update venue without revision number', () => {
        let newVenue = {name: "Hakkasan"};
        let updatedVenue = {name: "Hakkasan LV"};

        return createUpdateAndTest(newVenue, updatedVenue, (body, response) => {
            expect(response).to.have.property("statusCode").that.equal(500);
            expect(body).to.have.property("message").that.equal("Missed revision number");
        })
    });

    it('Shouldn\'t update venue with uncorrect revision number', () => {
        let newVenue = {name: "Hakkasan"};
        let updatedVenue = {name: "Hakkasan LV", _rev: 1};

        return createUpdateAndTest(newVenue, updatedVenue, (body, response) => {
            expect(response).to.have.property("statusCode").that.equal(500);
            expect(body).to.have.property("message").that.equal("The conditional request failed");
        })
    });

});

function createVenue(params) {
    return wrappedCreate.run(params);
}

function createUpdateAndTest(newVenue, updatedVenue, expectations) {
    return createVenue(getParametersFor(newVenue))
        .then((response) => {
            return wrappedUpdate.run(getParametersFor(updatedVenue, response))
        })
        .then(response => {
            let body = JSON.parse(response.body);
            expectations(body, response);
        });
}

function getParametersFor(venue, response) {
    let params = {};
    if (response) {
        let responseBody = JSON.parse(response.body);
        let id = responseBody.id;
        responseBody.screen_groups.forEach(group => {
            _addId(venue, 'screen_groups', group);
            group.screens.forEach(screen => _addId(group, 'screens', screen))
        });
        params.pathParameters = {};
        params.pathParameters.id = id;
    }
    params.body = JSON.stringify(venue);
    return params;

    function _addId(sourceElement, sourceField, destinationElement) {
        destinationElement.id = sourceElement[sourceField].map(element => element.name == destinationElement.name)[0].id;
    }
}