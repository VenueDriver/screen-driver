'use strict';

// tests for create_venue
// Generated by serverless-mocha-plugin
require('./test_provider_configurator').configure();
const DatabaseCleaner = require('./database_cleaner');

const lambda = require('../venues/create.js');
const mochaPlugin = require('serverless-mocha-plugin');

const lambdaWrapper = mochaPlugin.lambdaWrapper;
const expect = mochaPlugin.chai.expect;
const wrapped = lambdaWrapper.wrap(lambda, {handler: 'create'});

describe('create_venue', () => {
    before((done) => {
        DatabaseCleaner.cleanDatabase().then(() => done());
    });

    afterEach(done => {
        DatabaseCleaner.cleanDatabase().then(() => done());
    });

    it('Create venue with name', () => {
        let venue = {
            name: "Hakkasan"
        };
        let params = {};
        params.body = JSON.stringify(venue);

        return wrapped.run(params).then(response => {
            response.body = JSON.parse(response.body);
            expect(response.statusCode).to.equal(200);
            expect(response.body).to.have.property("id").with.lengthOf(36);
            expect(response.body).to.have.property("name").that.equal("Hakkasan");
            expect(response.body).to.have.property("content_id").to.be.null;
            expect(response.body).to.have.property("screen_groups").to.be.an('array').that.is.empty;
            expect(response.body).to.have.property("_rev").that.equal(0);
        });
    });

    it('Create venue with content_id', () => {
        let venue = {
            name: "Hakkasan",
            content_id: "710b962e-041c-11e1-9234-0123456789ab"
        };
        let params = {};
        params.body = JSON.stringify(venue);

        return wrapped.run(params).then(response => {
            response.body = JSON.parse(response.body);
            expect(response.statusCode).to.equal(200);
            expect(response.body).to.have.property("id").with.lengthOf(36);
            expect(response.body).to.have.property("content_id").with.lengthOf(36);
            expect(response.body).to.have.property("content_id").that.equal("710b962e-041c-11e1-9234-0123456789ab");
        });
    });


    it('Create venue with existing name', () => {
        let venue = {
            name: "Hakkasan"
        };
        let params = {};
        params.body = JSON.stringify(venue);

        wrapped.run(params).then(response => {
            expect(response.statusCode).to.equal(200);
    });
        return wrapped.run(params).then(response => {
            response.body = JSON.parse(response.body);
            expect(response.statusCode).to.equal(500);
            expect(response.body).to.have.property("message").that.equal("Venue with such name already exists");
        });
    });
});
