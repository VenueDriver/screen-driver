authenticate:
  handler: src/auth/auth.handler
  events:
    - http:
        path: api/auth
        method: post
        cors: true

authorizer:
  handler: src/auth/authorizer.handler

get_venues_list:
  handler: src/venues/list.list
  events:
    - http:
        path: api/venues
        method: get
        cors: true

create_venue:
  handler: src/venues/create.create
  events:
    - http:
        path: api/venues
        method: post
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

update_venue:
  handler: src/venues/update.update
  events:
    - http:
        path: api/venues/{id}
        method: put
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

delete_venue:
  handler: src/venues/delete.delete
  events:
    - http:
        path: api/venues/{id}
        method: delete
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

delete_screen_group:
  handler: src/venues/delete_screen_group.delete
  events:
    - http:
        path: api/venues/{id}/screen_groups/{group_id}
        method: delete
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

delete_screen:
  handler: src/venues/delete_screen.delete
  events:
    - http:
        path: api/venues/{id}/screen_groups/{group_id}/screens/{screen_id}
        method: delete
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

get_content_list:
  handler: src/content/list.list
  events:
    - http:
        path: api/content
        method: get
        cors: true

create_content:
  handler: src/content/create.create
  events:
    - http:
        path: api/content
        method: post
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

update_content:
  handler: src/content/update.update
  events:
    - http:
        path: api/content/{id}
        method: put
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

delete_content:
  handler: src/content/delete.delete
  events:
    - http:
        path: api/content/{id}
        method: delete
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

get_settings_list:
  handler: src/setting/list.list
  events:
    - http:
        path: api/settings
        method: get
        cors: true

create_setting:
  handler: src/setting/create.create
  events:
    - http:
        path: api/settings
        method: post
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

update_setting:
  handler: src/setting/update.update
  environment: ${self:custom.properties.pusher}
  events:
    - http:
        path: api/settings/{id}
        method: put
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

delete_setting:
  handler: src/setting/delete.delete
  events:
    - http:
        path: api/settings/{id}
        method: delete
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

refresh_screens:
  handler: src/screen_notifications/refresh_screens.refresh
  environment: ${self:custom.properties.pusher}
  events:
    - http:
        path: api/screens/refresh
        method: post
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

get_pusher_config:
  handler: src/notifier/notification_config.getConfig
  environment: ${self:custom.properties.pusher}
  events:
    - http:
        path: api/screens/notification-config
        method: get
        cors: true

create_schedule:
  handler: src/schedule/create.create
  events:
    - http:
        path: api/schedules
        method: post
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

get_schedules_list:
  handler: src/schedule/list.list
  events:
    - http:
        path: api/schedules
        method: get
        cors: true

update_schedule:
  handler: src/schedule/update.update
  events:
    - http:
        path: api/schedules/{id}
        method: put
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

delete_schedule:
  handler: src/schedule/delete.delete
  events:
    - http:
        path: api/schedules/{id}
        method: delete
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

handle_schedules_stream:
  handler: src/schedule/stream/stream_handler.handleEvent
  events:
    - stream:
        type: dynamodb
        arn:
          Fn::GetAtt:
            - SchedulesTable
            - StreamArn

create_user:
  handler: src/user/create.create
  events:
    - http:
        path: api/users
        method: post
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

get_users_list:
  handler: src/user/list.list
  events:
    - http:
        path: api/users
        method: get
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

update_user:
  handler: src/users/update.update
  events:
    - http:
        path: api/users/{id}
        method: put
        cors: true
        integration: lambda
        authorizer: ${self:custom.authorizer}

push_schedules_update:
  handler: src/screen_notifications/reload_schedules.scheduleUpdateMessage
  environment: ${self:custom.properties.pusher}

handle_settings_stream:
  handler: src/setting/stream/stream_handler.handleEvent
  events:
    - stream:
        type: dynamodb
        arn:
          Fn::GetAtt:
            - SettingsTable
            - StreamArn

push_settings_update:
  handler: src/screen_notifications/reload_settings.settingUpdateMessage
  environment: ${self:custom.properties.pusher}
